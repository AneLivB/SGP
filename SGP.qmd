---
title: "Sustainable genetics project"
author: "Ane Liv Berthelsen"
format:
  html: 
  #pdf: 
    toc: true
    toc-depth: 2
  #  toc-title: "Contents"
    number-sections: FALSE
  #  documentclass: article
  #  geometry:
  #    - top=30mm
  #    - left=30mm
  #    - heightrounded
editor: visual
date: 11/20/2023
toc: true
number-sections: true
mainfont: Times New Roman
---

```{r}
#| label: setup
#| echo: FALSE

#This code chunk is dedicated to variables containing the path to the folder related to the project. 
figs_dir <- file.path("Results", "Figures")
tabs_dir <- file.path("Results", "Tables")

#remember to add a line that saves the figures and tables in the correct folder
#e.g. write_csv(., file.path(tabs_dir, "name of table"))
#e.g. ggsave(plot = name_of_plot, filename = file.path(figs_dir, "name of figure")), width = 19, height = 19, unit = "cm", dpi = 500)
```

# Description

Scientific research is a massive endeavor, consuming vast quantities of single-use plastics. The sustainable genetics project aim to empirically test the re-usability of lab plastic wear, specifically the plastic racks used for PCRs and detection. The project was based around the protocol for Antarctic fur seal genotyping using microsatellites. In this protocol, extracted DNA is first amplified using PCR and since transfered to detection plates for sequencing. The plates used for detection contain only a small diluted concentration of DNA, while the PCR plates have been used in the PCR process and therefore contain a high concentration of DNA. Therefore, we assume that the potential risk of contamination from a previously used plate would be higher in the PCR step.

```{r}
#| label: packages
#| echo: FALSE
#here::here()
invisible(pacman::p_load(dplyr, tidyverse, here, stringi, png, knitr))
```

# Methods

The 274 samples were collected from Bird Island, South Georgia (54째00024.800 S, 38째03004.100 W) during the austral summer of 2020-2021. Tissue samples were collected from the flipper or umbilical cord of Antarctic fur seal pups and stored in 20% dimethyl sulphoxide saturated with sodium chloride at -20째C. The DNA was extracted using a standard chloroform-isoamylalcohol protocol and genotyped at 39 microsatellite loci separated into 5 mixes for improved scoring. PCR amplification was performed using a Type It Kit (Qiagen) with the following program:

| Stage | No. of cycles | Temperature (째C) | Duration   | Process      |
|-------|---------------|------------------|------------|--------------|
| 1     | 1             | 94               | 5 minutes  | Heat up      |
| 2     | 28            | 94               | 30 seconds | Denaturation |
|       |               | 60/53            | 90 seconds | Annealing    |
|       |               | 72               | 30 seconds | Extension    |
| 3     | 1             | 60/53            | 30 minutes | Annealing    |
| 4     | 1             | 10               | hold       | Cool down    |

: PCR program {#tbl-PCR}

*Note: Annealing temperatures are mastermix-specific.*

The PCR product was transferred to and diluted on detection plates before being resolved by electrophoresis on an ABI 3730xl capillary sequencer (Applied Biosystems, Waltham, MA, USA). Each plate contained three positive controls to ensure standardisation of microsatellite scoring across plates. Allele sizes were scored automatically using GeneMarker v. 2.6.2 (SoftGenetics, LLC., State College, PA, USA) and manually inspected and corrected when necessary.

To assess the re-usability of both PCR plates and detection plates, the samples were placed on a master plate from which the samples were transferred to PCR plates. The samples were distributed on a total of 3 master plates. The samples were subjected to four treatments: standard procedure, internal control, re-used PCR plate and re-used detection plate. This is illustrated by @fig-Schematic. The re-used plates all originated from the 'standard procedure' round. Thereby, we could ensure knowledge of the sample previously contained within a specific well.

![Schematic overview](Results/Figures/SGP_setup.png){#fig-Schematic fig-align="center" width="500"}

#### Washing protocol

After the initial use, the racks were washed using the following steps. First, each plate was individually rinsed with distilled water and emptied 10 times, before submerging in soap water for two hours. After soaking, each plate was again rinsed and emptied before left on a paper towel over night to dry.

#### Quantification of genotyping errors

To estimate the genotyping error rate, the 'standard procedure' treatment was first compared to the 'internal control' treatment to establish a baseline error rate. Any discrepancy between the two sets of genotypes was flagged as an error. The error rate was evaluated both for each allele and for the genotype on a locus-specific level and across all loci. After establishing a baseline error rate, the same comparision was preformed between the 'standard procedure' treatment and the two re-use treatments independently. In these cases, any discrepancy was first explored for the possibility of contamination, before flagged as an error, if no contamination was detectable.

#### Identification of contamination

The samples were each repeated for all four treatments. In the case of a discrepancy between the original genotype and the 're-used PCR plate' or 're-used detection plate' treatment, the new genotype was compared to the genotype of the individual previously genotyped in the same well. If the genotype matched the genotype of the original individual, the mis-matched was marked as contamination.

### Data

The data for this project are the raw sequencing reads from the ABI 3730xl capillary sequencer. Each files is identified with the following name structure: RackX_mixY_Z. Where X gives the rack number, Y the mix and Z the treatment (1 = standard procedure, 2 = internal control, 3 = Re-used PCR plate and 4 = Re-used detection plate).

```{r}
#| label: data
#| echo: FALSE

#make list with path to all files
Data_files <- list.files(path = "Data/Working_data", pattern = "*.csv", full.names = T) 
Mix1_locate <- grep("mix1", Data_files)
Mix1 <- Data_files[Mix1_locate]

Data_list = list()
#Broken well
remove_row <- c("E03_Empty")

#for loop which reads the csv files, removes the broken well and collects the dataframes in one list for mix 1
for(i in Data_files[Mix1_locate]) {
  x <- read.csv(i, sep = ";")
  x <- subset(x, ID != remove_row)
  Data_list[[i]] <- x
  #The following line tidies up the names of the files
   names(Data_list) <- gsub("Data/Working_data/AP_AFS_|AFS|_\\d{2}|_AlleleReport.csv", "", names(Data_list))
}

#for loop which reads the csv files, removes the broken well and the columns 'rack_location' and 'id' and collects the dataframes in one list for other mixes than mix one. 
for(i in Data_files[-Mix1_locate]) {
  x <- read.csv(i, sep = ";")
  x <- subset(x, ID != remove_row, select = -c(Rack_location, ID))
  Data_list[[i]] <- x
  #The following line tidies up the names of the files
  names(Data_list) <- gsub("Data/Working_data/AP_AFS_|AFS|_\\d{2}|_AlleleReport.csv", "", names(Data_list))
}

#bind the different mixes together
Data_df = do.call(cbind, Data_list)
#Separate the dataframe into Rack and treatment and remove this info from column names
R154_R1 <- Data_df %>% select(contains("Rack154")) %>% select(contains("_1")) %>%
  rename_with(~sub("Rack154_", "", .), everything()) %>%
  rename_with(~sub("_1", "", .), everything())
R154_R2 <- Data_df %>% select(contains("Rack154")) %>% select(contains("_2")) %>%
  rename_with(~sub("Rack154_", "", .), everything()) %>%
  rename_with(~sub("_2", "", .), everything())
R154_R3 <- Data_df %>% select(contains("Rack154")) %>% select(contains("_3")) %>%
  rename_with(~sub("Rack154_", "", .), everything()) %>%
  rename_with(~sub("_3", "", .), everything())
R155_R1 <- Data_df %>% select(contains("Rack155")) %>% select(contains("_1")) %>%
  rename_with(~sub("Rack155_", "", .), everything()) %>%
  rename_with(~sub("_1", "", .), everything())
R155_R2 <- Data_df %>% select(contains("Rack155")) %>% select(contains("_2")) %>%
  rename_with(~sub("Rack155_", "", .), everything()) %>%
  rename_with(~sub("_2", "", .), everything())

rm(Data_df, Data_list, x, Data_files, i, Mix1, Mix1_locate, remove_row)
```

Before starting the error rate evaluation, the no. of genotypes that could no be scored for each round and mix per rack is tabulated (See @tbl-failed).

```{r}
#| label: Failed samples
#| echo: FALSE
#| tbl-cap: Failed genotypes {#tbl-failed}

Count_NAs <- function(DF) {
  Mix1 <- sum(is.na(select(DF, contains("mix1"))))
  Mix2 <- sum(is.na(select(DF, contains("mix2"))))
  Mix3 <- sum(is.na(select(DF, contains("mix3"))))
  Mix4 <- sum(is.na(select(DF, contains("mix4"))))
  Mix5 <- sum(is.na(select(DF, contains("mix5"))))
  Total <- sum(is.na(DF))
  Rack <- deparse(substitute(DF))
  Output <- rbind(Mix1, Mix2, Mix3, Mix4, Mix5,Total)
  colnames(Output) <- Rack
  return(Output)
}

Failed_samples <- cbind(Count_NAs(R154_R1), Count_NAs(R154_R2), Count_NAs(R154_R3), Count_NAs(R155_R1), Count_NAs(R155_R2))
knitr::kable(Failed_samples)
```

#### Error rate calculation

The error rate is calculated by comparing all scored alleles and genotypes from the standard procedure within one rack with the other treatments starting with the internal control. The internal control is included as a baseline for error rates to have a comparable metric to evaluate if the reused plates inflate the error rate.

```{r}
#| label: Allelic errors
#| echo: FALSE
#| tbl-cap: Allelic mismatches {#tbl-allelemismatch}
#Function to compare scored alleles between two rounds and find the mismatches
#The function has two output lines. These cannot work in tandem. 
#The first return statement returns the total mismatches and error rate
#The second return statement can be used with "Find_mismatches" to locate mismatch in Genemarker
Mismatch <- function(DF1, DF2){
  mismatches <- which(DF1 != DF2, arr.ind = TRUE)
  Total_mismatches <- length(mismatches[,1])
  Rack_1 <- deparse(substitute(DF1))
  Rack_2 <- deparse(substitute(DF2))
  Round <- gsub("R\\d{3}|_", "", Rack_2)
  if (Round == "R2"){
    Treatment <- "Internal control"
  } else if (Round == "R3") {
    Treatment <- "Re-used PCR"
  } else {
    Treatment <- "Re-used detection plate"
  }
  Total_comparisons <- sum(!is.na(DF1[3:82]) & !is.na(DF2[3:82]))
  #cat("Total mismatches between", Rack_1 ,"and", Rack_2, "=", Total_mismatches)
  Error_rate <- Total_mismatches/Total_comparisons  
  return(as.data.frame(cbind(Rack_1, Rack_2, Treatment, Total_mismatches, Error_rate)))
  ID <- cbind(DF1$mix1.ID[mismatches[, 1]])
  Loci <- cbind(colnames(DF1)[mismatches[, 2]])
  Find_mismatch <- cbind(ID, Loci, Rack_2, Treatment)
  colnames(Find_mismatch) <- c("ID", "Loci", "Rack", "Treatment")
  #return(Find_mismatch)
}

#The following applies the mismatch function to the chosen racks and binds the output together
#The output contains the mismatches and the error rate
Mismatches <- bind_rows(
  Mismatch(R154_R1, R154_R2),
  Mismatch(R154_R1, R154_R3),
  Mismatch(R155_R1, R155_R2)) %>%
         mutate(Total_mismatches = as.numeric(Total_mismatches),
         Error_rate = as.numeric(Error_rate))

knitr::kable(Mismatches)

#The following applies the mismatch function to the chosen racks and binds the output together
#The output contains the location of the mismatches
#Find_mismatches <- rbind(
  #Mismatch(R154_R1, R154_R2),
  #Mismatch(R154_R1, R154_R3),
  #Mismatch(R155_R1, R155_R2)) 
```

#### Inspect mismatches for contamination

The comparison between the different treatments and the standard procedure yielded a list of mismatches. To identify whether these mismatches in the case of the 're-used PCR plate' and 're-used detection plate' treatment was due to contamination from the samples previous found in the same well, the new genotype was compared to the original genotype scored from that well. If the genotype matched the original genotype, the mis-match was marked as contamination.

```{r}

```

# Results

Will come later

@fig-allelicerrors shows the total no. of mismatches observed when comparing the standard procedure treatment of each rack with the other treatments.

```{r}
#| label: fig-allelicerrors
#| echo: FALSE
#| warning: FALSE
#| fig-cap: "Allelic mismatches"

ggplot(data = Mismatches, aes(y=Total_mismatches, x = Treatment, fill = Rack_2)) +
  geom_bar(stat = "identity", position = position_dodge(), width = 0.5) +
  scale_fill_brewer(palette = "Greens") +
  guides(fill = F, scale = "none") + #remove the legend
  geom_text(aes(label = Rack_2), vjust = -0.4, position = position_dodge(0.5)) + #adds the rack name to the bar, vjust pushes the text above the bar
  ylim(0,20) +
  ggtitle("Total no. of mismatches") +
  theme_bw()
```
